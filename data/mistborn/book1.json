<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chapter Companion - Spoiler-Free Character Guides</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Georgia', serif;
            background-color: #f9f7f4;
            color: #2c2c2c;
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        header {
            text-align: center;
            margin-bottom: 3rem;
        }

        h1 {
            font-size: 2.5rem;
            color: #1a1a1a;
            font-weight: 300;
            margin-bottom: 0.5rem;
        }

        .subtitle {
            color: #666;
            font-style: italic;
            font-size: 1.1rem;
        }

        /* Bookshelf Styles */
        .bookshelf {
            background: linear-gradient(to bottom, #8b6f47 0%, #6d5638 100%);
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 2rem;
        }

        .shelf {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1.5rem;
            background: linear-gradient(to bottom, transparent 95%, #5a4a3a 95%);
            padding-bottom: 1rem;
            margin-bottom: 2rem;
        }

        .book {
            cursor: pointer;
            transition: transform 0.3s ease;
            position: relative;
        }

        .book:hover {
            transform: translateY(-10px);
        }

        .book-spine {
            width: 100%;
            height: 200px;
            background: linear-gradient(135deg, #c9302c 0%, #9a221f 100%);
            border-radius: 3px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            box-shadow: 
                inset -3px 0 10px rgba(0,0,0,0.2),
                0 2px 5px rgba(0,0,0,0.3);
            position: relative;
            overflow: hidden;
        }

        .book-spine::before {
            content: '';
            position: absolute;
            top: 10%;
            left: 0;
            right: 0;
            height: 2px;
            background: rgba(255,255,255,0.1);
        }

        .book-spine::after {
            content: '';
            position: absolute;
            bottom: 10%;
            left: 0;
            right: 0;
            height: 2px;
            background: rgba(255,255,255,0.1);
        }

        .book-title {
            writing-mode: vertical-rl;
            text-orientation: mixed;
            color: #fff;
            font-size: 0.9rem;
            text-align: center;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }

        /* Different book colors */
        .book-spine.color-1 { background: linear-gradient(135deg, #2c5aa0 0%, #1e3c72 100%); }
        .book-spine.color-2 { background: linear-gradient(135deg, #2e7d32 0%, #1b5e20 100%); }
        .book-spine.color-3 { background: linear-gradient(135deg, #6a1b9a 0%, #4a148c 100%); }
        .book-spine.color-4 { background: linear-gradient(135deg, #d84315 0%, #bf360c 100%); }
        .book-spine.color-5 { background: linear-gradient(135deg, #5d4037 0%, #3e2723 100%); }

        /* Book page styles */
        .book-content {
            background: #fff;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .chapter-selector {
            margin-bottom: 2rem;
        }

        .chapter-selector label {
            font-weight: bold;
            margin-right: 1rem;
        }

        .chapter-selector select {
            padding: 0.5rem 1rem;
            font-size: 1rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: #fff;
            cursor: pointer;
        }

        .chapter-summary {
            background: #f5f5f5;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 2rem;
        }

        .spoiler-toggle {
            background: #e0e0e0;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .spoiler-toggle:hover {
            background: #d0d0d0;
        }

        .spoiler-content {
            display: none;
            margin-top: 0.5rem;
            font-style: italic;
        }

        .spoiler-content.visible {
            display: block;
        }

        .characters-section h3 {
            margin-bottom: 1rem;
            color: #333;
        }

        .character-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .character-card {
            background: #f9f9f9;
            padding: 1.5rem;
            border-radius: 6px;
            border-left: 4px solid #c9302c;
        }

        .character-card.current-chapter {
            background: #fff3e0;
            border-left-color: #ff9800;
        }

        .character-name {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            color: #1a1a1a;
        }

        .character-description {
            color: #555;
            line-height: 1.5;
        }

        .back-button {
            display: inline-block;
            margin-bottom: 2rem;
            padding: 0.5rem 1rem;
            background: #e0e0e0;
            border: none;
            border-radius: 4px;
            text-decoration: none;
            color: #333;
            cursor: pointer;
        }

        .back-button:hover {
            background: #d0d0d0;
        }

        /* Hidden by default */
        .series-shelf, .book-page {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Chapter Companion</h1>
            <p class="subtitle">Spoiler-free character guides for your reading journey</p>
        </header>

        <!-- Main Bookshelf -->
        <div id="mainShelf" class="bookshelf">
            <div class="shelf" id="seriesShelf"></div>
        </div>

        <!-- Series Bookshelf -->
        <div id="seriesView" class="series-shelf">
            <button class="back-button" onclick="showMainShelf()">← Back to Series</button>
            <h2 id="seriesTitle" style="text-align: center; margin-bottom: 2rem;"></h2>
            <div class="bookshelf">
                <div class="shelf" id="booksShelf"></div>
            </div>
        </div>

        <!-- Book Page -->
        <div id="bookPage" class="book-page">
            <button class="back-button" onclick="showSeriesShelf()">← Back to Books</button>
            <div class="book-content">
                <h2 id="bookTitle" style="margin-bottom: 2rem;"></h2>
                
                <div class="chapter-selector">
                    <label for="chapterSelect">Currently reading:</label>
                    <select id="chapterSelect" onchange="updateChapter()">
                        <!-- Chapters will be populated here -->
                    </select>
                </div>

                <div class="chapter-summary">
                    <button class="spoiler-toggle" onclick="toggleSpoiler('chapterSummary')">
                        Show Chapter Summary
                    </button>
                    <div id="chapterSummary" class="spoiler-content">
                        <!-- Chapter summary will be populated here -->
                    </div>
                </div>

                <div class="characters-section">
                    <h3>Characters in Current Chapter</h3>
                    <div id="currentChapterCharacters" class="character-grid">
                        <!-- Current chapter characters will be populated here -->
                    </div>

                    <h3>All Characters (up to current chapter)</h3>
                    <div id="allCharacters" class="character-grid">
                        <!-- All characters will be populated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Data storage
        let seriesData = {};
        let currentSeries = null;
        let currentBook = null;
        let currentChapter = 1;

        // Initialize the app
        async function init() {
            try {
                // Load series data
                const response = await fetch('data/series.json');
                seriesData = await response.json();
                renderMainShelf();
            } catch (error) {
                console.error('Error loading data:', error);
                document.getElementById('mainShelf').innerHTML = '<p style="text-align: center; color: #666;">Error loading series data. Please ensure the data/series.json file exists.</p>';
            }
        }

        // Render main bookshelf with all series
        function renderMainShelf() {
            const shelf = document.getElementById('seriesShelf');
            shelf.innerHTML = '';
            
            seriesData.series.forEach((series, index) => {
                const book = document.createElement('div');
                book.className = 'book';
                book.onclick = () => showSeries(series);
                
                const spine = document.createElement('div');
                spine.className = `book-spine color-${(index % 5) + 1}`;
                
                const title = document.createElement('div');
                title.className = 'book-title';
                title.textContent = series.title;
                
                spine.appendChild(title);
                book.appendChild(spine);
                shelf.appendChild(book);
            });
        }

        // Show series bookshelf
        function showSeries(series) {
            currentSeries = series;
            document.getElementById('mainShelf').style.display = 'none';
            document.getElementById('seriesView').style.display = 'block';
            document.getElementById('seriesTitle').textContent = series.title;
            
            const shelf = document.getElementById('booksShelf');
            shelf.innerHTML = '';
            
            series.books.forEach((bookTitle, index) => {
                const book = document.createElement('div');
                book.className = 'book';
                book.onclick = () => showBook(series.id, index + 1, bookTitle);
                
                const spine = document.createElement('div');
                spine.className = `book-spine color-${(index % 5) + 1}`;
                
                const title = document.createElement('div');
                title.className = 'book-title';
                title.textContent = bookTitle;
                
                spine.appendChild(title);
                book.appendChild(spine);
                shelf.appendChild(book);
            });
        }

        // Show book page
        async function showBook(seriesId, bookNumber, bookTitle) {
            currentBook = { seriesId, bookNumber, title: bookTitle };
            document.getElementById('seriesView').style.display = 'none';
            document.getElementById('bookPage').style.display = 'block';
            document.getElementById('bookTitle').textContent = bookTitle;
            
            try {
                // Load book data
                const response = await fetch(`data/${seriesId}/book${bookNumber}.json`);
                const bookData = await response.json();
                currentBook.data = bookData;
                
                // Populate chapter selector
                const select = document.getElementById('chapterSelect');
                select.innerHTML = '';
                bookData.chapters.forEach((chapter, index) => {
                    const option = document.createElement('option');
                    option.value = index + 1;
                    option.textContent = `Chapter ${index + 1}: ${chapter.title}`;
                    select.appendChild(option);
                });
                
                // Show first chapter
                currentChapter = 1;
                updateChapter();
            } catch (error) {
                console.error('Error loading book data:', error);
                document.getElementById('bookPage').innerHTML = '<p style="text-align: center; color: #666;">Error loading book data. Please ensure the data file exists at: data/' + seriesId + '/book' + bookNumber + '.json</p>';
                                    
            }
        }

        // Update chapter display
        function updateChapter() {
            const chapterIndex = parseInt(document.getElementById('chapterSelect').value) - 1;
            currentChapter = chapterIndex + 1;
            const chapter = currentBook.data.chapters[chapterIndex];
            
            // Update chapter summary
            document.getElementById('chapterSummary').textContent = chapter.summary;
            document.getElementById('chapterSummary').classList.remove('visible');
            
            // Get all characters up to current chapter
            const allChars = new Set();
            const currentChars = new Set(chapter.charactersIntroduced || []);
            
            for (let i = 0; i <= chapterIndex; i++) {
                const ch = currentBook.data.chapters[i];
                if (ch.charactersIntroduced) {
                    ch.charactersIntroduced.forEach(char => allChars.add(char));
                }
            }
            
            // Render current chapter characters
            const currentGrid = document.getElementById('currentChapterCharacters');
            currentGrid.innerHTML = '';
            currentChars.forEach(charName => {
                if (chapter.characters && chapter.characters[charName]) {
                    currentGrid.appendChild(createCharacterCard(charName, chapter.characters[charName], true));
                }
            });
            
            // Render all other characters
            const allGrid = document.getElementById('allCharacters');
            allGrid.innerHTML = '';
            allChars.forEach(charName => {
                if (!currentChars.has(charName)) {
                    // Find the most recent chapter info for this character
                    for (let i = chapterIndex; i >= 0; i--) {
                        const ch = currentBook.data.chapters[i];
                        if (ch.characters && ch.characters[charName]) {
                            allGrid.appendChild(createCharacterCard(charName, ch.characters[charName], false));
                            break;
                        }
                    }
                }
            });
        }

        // Create character card
        function createCharacterCard(name, info, isCurrent) {
            const card = document.createElement('div');
            card.className = `character-card ${isCurrent ? 'current-chapter' : ''}`;
            
            const nameEl = document.createElement('div');
            nameEl.className = 'character-name';
            nameEl.textContent = name;
            
            const descEl = document.createElement('div');
            descEl.className = 'character-description';
            descEl.textContent = `${info.background} ${info.arc}`;
            
            card.appendChild(nameEl);
            card.appendChild(descEl);
            return card;
        }

        // Navigation functions
        function showMainShelf() {
            document.getElementById('seriesView').style.display = 'none';
            document.getElementById('mainShelf').style.display = 'block';
        }

        function showSeriesShelf() {
            document.getElementById('bookPage').style.display = 'none';
            document.getElementById('seriesView').style.display = 'block';
        }

        // Toggle spoiler content
        function toggleSpoiler(id) {
            const content = document.getElementById(id);
            content.classList.toggle('visible');
            const button = content.previousElementSibling;
            button.textContent = content.classList.contains('visible') ? 
                'Hide Chapter Summary' : 'Show Chapter Summary';
        }

        // Start the app
        init();
    </script>
</body>
</html>
